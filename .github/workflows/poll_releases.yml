name: Poll branch releases
on:
  push:

  # Daily
  schedule:
    - cron:  '0 0 * * *'

  # Manually
  workflow_dispatch:

jobs:
  define-matrix:
    runs-on: ubuntu-latest

    outputs:
      branches: ${{ steps.branches.outputs.matrix }}

    steps:
      - name: Define branches
        id: branches
        run: |
          echo 'matrix={"include":[{"branch":"master","prerelease":"false"},{"branch":"develop","prerelease":"true"}]}' >> $GITHUB_OUTPUT

  upstream-pull-request:
    name: Check upstream version
    runs-on: ubuntu-latest
    needs:
      - define-matrix

    permissions:
      contents: write
      pull-requests: write

    strategy:
      matrix: ${{ fromJSON(needs.define-matrix.outputs.branches) }}
      fail-fast: true

    steps:
      - name: Get repository name
        id: repo
        run: |
          repo_name="${{ github.event.repository.name }}"
          echo "repo_name=${repo_name,,}" >> $GITHUB_OUTPUT

      - name: Get upstream (pre)release
        id: upstream
        run: |
          read tag, url < <(echo $(curl -sL --request GET \
            --url "${{ github.api_url }}/repos/Radarr/Radarr/releases" \
            --header "Accept: application/vnd.github+json" \
            --header "Authorization: token ${{ github.token }}" \
            | jq --argjson pr ${{ matrix.prerelease }} \
            -r 'map(select(.prerelease==$pr)) | first | \
            .tag_name, .html_url'))

          echo "version=${tag//v}" >> $GITHUB_OUTPUT
          echo "url=${url}" >> $GITHUB_OUTPUT

      - name: Check if tag exists
        uses: mukunku/tag-exists-action@v1.6.0
        id: check_tag
        with:
          tag: 'v${{ steps.upstream.outputs.version }}'

      - name: Update Readme
        if: ${{ !fromJSON(steps.check_tag.outputs.exists }}
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: ${{ vars.RELEASE_VERSION }}
          replace: ${{ steps.upstream.outputs.version }}
          include: 'README.md'
          regex: false

      - name: Create pull request
        if: ${{ !fromJSON(steps.check_tag.outputs.exists }}
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.PR_CREATE_TOKEN }}
          add-paths: |
            README.md
          commit-message: |
            docs: Bump ${{ matrix.branch }} image version to ${{ steps.upstream.outputs.version }}
          title: "docs: Bump ${{ matrix.branch }} image version to ${{ steps.upstream.outputs.version }}"
          body: |
            ## Upstream release
            [1]: ${{ steps.upstream.outputs.url }}
          branch: ${{ steps.repo.outputs.repo_name }}-pull
          delete-branch: true
          branch-suffix: short-commit-hash

      - name: Update repository variables
        if: ${{ !fromJSON(steps.check_tag.outputs.exists }}
        run: |
          if [[ !${{ fromJSON(matrix.prerelease) }} ]]; then
            gh variable set RELEASE_VERSION --body "${{ matrix.version }}"
          else
            gh variable set PRERELEASE_VERSION --body "${{ matrix.version }}"
          fi
        env:
          GH_TOKEN: ${{ secrets.PAT }}

  publish-release:
    name: Publish releases
    runs-on: ubuntu-latest
    needs:
      - commit-and-push

    permissions:
      contents: write

    strategy:
      matrix:
        include: ${{ fromJSON(needs.commit-and-push.outputs.tags) }}
      max-parallel: 1
      fail-fast: true

    steps:
      - uses: actions/checkout@v4

      - name: Generate changelog
        id: changelog
        uses: metcalfc/changelog-generator@v4.6.2
        with:
          mytoken: ${{ github.token }}
          head-ref: ${{ matrix.tag }}
          base-ref: v${{ !fromJSON(matrix.prerelease) && join(['v', vars.PRERELEASE_VERSION], '') || '' }}

      - name: Publish release
        uses: ncipollo/release-action@v1
        with:
          prerelease: ${{ fromJSON(matrix.prerelease) }}
          name: ${{ matrix.version }}
          tag: ${{ matrix.tag }}
          body: |
            Changes in this Release: 
            ${{ steps.changelog.outputs.changelog }}

      - name: Update repository variables
        run: |
          if [[ !${{ fromJSON(matrix.prerelease) }} ]]; then
            gh variable set RELEASE_VERSION --body "${{ matrix.version }}"
          else
            gh variable set PRERELEASE_VERSION --body "${{ matrix.version }}"
          fi
        env:
          GH_TOKEN: ${{ secrets.PAT }}

  docker:
    name: Build images
    runs-on: ubuntu-latest
    needs:
      - commit-and-push

    permissions:
      contents: write
      packages: write

    strategy:
      matrix:
        arch: ["amd64"]
        include: ${{ fromJSON(needs.commit-and-push.outputs.tags) }}
      max-parallel: 1
      fail-fast: true

    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Sanitize repo slug
        uses: actions/github-script@v7
        id: repo_slug
        with:
          result-encoding: string
          script: return '${{ github.repository }}'.toLowerCase()
      
      - uses: actions/checkout@v4
        with:
          ref: ${{ matrix.tag }}

      - uses: dsaltares/fetch-gh-release-asset@1.1.2
        with:
          repo: 'Radarr/Radarr'
          version: 'tags/${{ matrix.tag }}'
          file: 'Radarr.${{ matrix.branch }}.${{ matrix.version }}.linux-musl-core-x64.tar.gz'
          target: 'radarr.tar.gz'
          token: ${{ github.token }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        continue-on-error: true
        id: buildx1
        with:
          build-args: |
            VERSION=${{ matrix.version }}${{ matrix.branch == 'develop' && '-dev' }}
          context: .
          platforms: linux/${{ matrix.arch }}
          push: true
          tags: |
            ghcr.io/${{ steps.repo_slug.outputs.result }}:${{ matrix.version }}-${{ matrix.branch }}
            ghcr.io/${{ steps.repo_slug.outputs.result }}:${{ matrix.version }}
            ghcr.io/${{ steps.repo_slug.outputs.result }}:${{ matrix.branch }}
            ghcr.io/${{ steps.repo_slug.outputs.result }}:latest

      # Temp workaround for failed builds
      - name: Wait to retry
        if: steps.buildx1.outcome != 'success'
        run: |
          sleep 60

      # Temp workaround for failed builds
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        if: steps.buildx1.outcome != 'success'
        with:
          build-args: |
            VERSION=${{ matrix.version }}${{ matrix.branch == 'develop' && '-dev' }}
          context: .
          platforms: linux/${{ matrix.arch }}
          push: true
          tags: |
            ghcr.io/${{ steps.repo_slug.outputs.result }}:${{ matrix.version }}-${{ matrix.branch }}
            ghcr.io/${{ steps.repo_slug.outputs.result }}:${{ matrix.version }}
            ghcr.io/${{ steps.repo_slug.outputs.result }}:${{ matrix.branch }}
            ghcr.io/${{ steps.repo_slug.outputs.result }}:latest