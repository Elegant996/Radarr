name: Poll branch releases
on:
  push:

  # Daily
  schedule:
    - cron:  '0 0 * * *'

  # Manually
  workflow_dispatch:

jobs:
  define-matrix:
    runs-on: ubuntu-latest

    outputs:
      branches: ${{ steps.branches.outputs.matrix }}

    steps:
      - name: Define branches
        id: branches
        run: |
          echo 'matrix={"include":[{"branch":"master","prerelease":"false"},{"branch":"develop","prerelease":"true"}]}' >> $GITHUB_OUTPUT

  check-upstream:
    name: Check upstream version
    runs-on: ubuntu-latest
    needs:
      - define-matrix

    permissions:
      contents: write

    strategy:
      matrix: ${{ fromJSON(needs.define-matrix.outputs.branches) }}
      fail-fast: true

    outputs:
      release_branch: ${{ steps.releases.outputs.release_branch }}
      release_version: ${{ steps.releases.outputs.release_version }}
      prerelease_branch: ${{ steps.releases.outputs.prerelease_branch }}
      prerelease_version: ${{ steps.releases.outputs.prerelease_version }}

    steps:
      - name: Get upstream (pre)release
        id: upstream
        run: |
          TAG=$(curl -sL --request GET \
            --url "${{ github.api_url }}/repos/Radarr/Radarr/releases" \
            --header "Accept: application/vnd.github+json" \
            --header "Authorization: token ${{ github.token }}" \
            | jq --argjson DEVELOP ${{ matrix.prerelease }} \
            -r 'map(select(.prerelease==$DEVELOP)) | first | .tag_name')

          echo "version=${TAG//v}" >> $GITHUB_OUTPUT

      - name: Check if tag exists
        uses: mukunku/tag-exists-action@v1.6.0
        id: check_tag
        with:
          tag: 'v${{ steps.upstream.outputs.version }}'

      - name: Store releases
        id: releases
        run: |
            echo "${prerelease}_branch=${{ matrix.branch }}" >> "$GITHUB_OUTPUT"
            echo "${prerelease}_version=${version}" >> "$GITHUB_OUTPUT"
        env:
          prerelease: ${{ !fromJSON(matrix.prerelease) && 'release' || 'prerelease' }}
          version: ${{ !fromJSON(steps.check_tag.outputs.exists) && steps.upstream.outputs.version || '' }}

  commit-and-push:
    name: Push commits and release upstream version
    runs-on: ubuntu-latest
    needs:
      - check-upstream

    permissions:
      contents: write

    outputs:
      tags: ${{ steps.tags.outputs.matrix }}

    # Cannot use matrix in this instance
    env:
      release_branch: ${{ needs.check-upstream.outputs.release_branch }}
      release_version: ${{ needs.check-upstream.outputs.release_version }}
      prerelease_branch: ${{ needs.check-upstream.outputs.prerelease_branch }}
      prerelease_version: ${{ needs.check-upstream.outputs.prerelease_version }}

    steps:
      - uses: actions/checkout@v4
    
      - name: Update Readme (release)
        if: ${{ env.release_version != '' }}
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: ${{ vars.RELEASE_VERSION }}
          replace: ${{ env.release_version }}
          include: 'README.md'
          regex: false

      - name: Commit changes (release)
        if: ${{ env.release_version != '' }}
        uses: EndBug/add-and-commit@v9
        with:
          committer_name: GitHub Actions
          committer_email: actions@github.com
          message: 'docs: Bump ${{ env.release_branch }} image version to ${{ env.release_version }}'
          push: false
          tag: 'v${{ env.release_version }}'

      - name: Update Readme (prerelease)
        if: ${{ env.prerelease_version != '' }}
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: ${{ vars.PRERELEASE_VERSION }}
          replace: ${{ env.prerelease_version }}
          include: 'README.md'
          regex: false

      - name: Commit changes (prerelease)
        if: ${{ env.prerelease_version != '' }}
        uses: EndBug/add-and-commit@v9
        with:
          committer_name: GitHub Actions
          committer_email: actions@github.com
          message: 'docs: Bump ${{ env.prerelease_branch }} image version to ${{ env.prerelease_version }}'
          push: false
          tag: 'v${{ env.prerelease_version }}'

      - name: Define tags
        id: tags
        run: |
          if [ -z "${release_version}" ] && [ -z "${prerelease_version}" ]; then
            echo 'matrix=[{"tag":"v${{ env.release_version }}","version":"${{ env.release_version }}","branch":"${{ env.release_branch }}","prerelease":"false"},{"tag":"v${{ env.prerelease_version }}","version":"${{ env.prerelease_version }}","branch":"${{ env.prerelease_branch }}","prerelease":"true"}]' >> $GITHUB_OUTPUT
          elif [ -z "${prerelease_version}" ]; then
            echo 'matrix=[{"tag":"v${{ env.release_version }}","version":"${{ env.release_version }}","branch":"${{ env.release_branch }}","prerelease":"false"}]' >> $GITHUB_OUTPUT
          elif [ -z "${release_version}" ]; then
            echo 'matrix=[{"tag":"v${{ env.prerelease_version }}","version":"${{ env.prerelease_version }}","branch":"${{ env.prerelease_branch }}","prerelease":"true"}]' >> $GITHUB_OUTPUT
          else
            echo "There is no GitHub tag reference, skipping"
          fi

      - name: Push commits
        run: |
          git push

  publish-release:
    name: Publish releases
    runs-on: ubuntu-latest
    needs:
      - commit-and-push

    permissions:
      contents: write

    strategy:
      matrix:
        include: ${{ fromJSON(needs.commit-and-push.outputs.tags) }}
      max-parallel: 1
      fail-fast: true

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ matrix.tag }}

      - name: Generate changelog
        id: changelog
        uses: metcalfc/changelog-generator@v4.6.2
        with:
          mytoken: ${{ github.token }}
          head-ref: ${{ matrix.tag }}
          base-ref: v${{ !fromJSON(matrix.prerelease) && vars.PRERELEASE_VERSION || '' }}

      - name: Publish release
        uses: ncipollo/release-action@v1
        with:
          prerelease: ${{ fromJSON(matrix.prerelease) }}
          name: ${{ matrix.version }}
          tag: ${{ matrix.tag }}
          body: |
            Changes in this Release: 
            ${{ steps.changelog.outputs.changelog }}

      - name: Update repository variables
        run: |
          if [[ !${{ fromJSON(matrix.prerelease) }} ]]; then
            gh variable set RELEASE_VERSION --body "${{ matrix.version }}"
          else
            gh variable set PRERELEASE_VERSION --body "${{ matrix.version }}"
          fi
        env:
          GH_TOKEN: ${{ secrets.PAT }}

  docker:
    name: Build upstream version
    runs-on: ubuntu-latest
    needs:
      - commit-and-push

    permissions:
      contents: write
      packages: write


    strategy:
      matrix:
        arch: ["amd64"]
        include: ${{ fromJSON(needs.commit-and-push.outputs.tags) }}
      max-parallel: 1
      fail-fast: true

    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Sanitize repo slug
        uses: actions/github-script@v7
        id: repo_slug
        with:
          result-encoding: string
          script: return '${{ github.repository }}'.toLowerCase()
      
      - uses: actions/checkout@v4

      - uses: dsaltares/fetch-gh-release-asset@1.1.2
        with:
          repo: 'Radarr/Radarr'
          version: 'tags/${{ matrix.tag }}'
          file: 'Radarr.${{ matrix.branch }}.${{ matrix.version }}.linux-musl-core-x64.tar.gz'
          target: 'radarr.tar.gz'
          token: ${{ github.token }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        continue-on-error: true
        id: buildx1
        with:
          build-args: |
            VERSION=${{ matrix.version }}${{ matrix.branch == 'develop' && '-dev' }}
          context: .
          platforms: linux/${{ matrix.arch }}
          push: true
          tags: |
            ghcr.io/${{ steps.repo_slug.outputs.result }}:${{ matrix.version }}-${{ matrix.branch }}
            ghcr.io/${{ steps.repo_slug.outputs.result }}:${{ matrix.version }}
            ghcr.io/${{ steps.repo_slug.outputs.result }}:${{ matrix.branch }}
            ghcr.io/${{ steps.repo_slug.outputs.result }}:latest

      # Temp workaround for failed builds
      - name: Wait to retry
        if: steps.buildx1.outcome != 'success'
        run: |
          sleep 60

      # Temp workaround for failed builds
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        if: steps.buildx1.outcome != 'success'
        with:
          build-args: |
            VERSION=${{ matrix.version }}${{ matrix.branch == 'develop' && '-dev' }}
          context: .
          platforms: linux/${{ matrix.arch }}
          push: true
          tags: |
            ghcr.io/${{ steps.repo_slug.outputs.result }}:${{ matrix.version }}-${{ matrix.branch }}
            ghcr.io/${{ steps.repo_slug.outputs.result }}:${{ matrix.version }}
            ghcr.io/${{ steps.repo_slug.outputs.result }}:${{ matrix.branch }}
            ghcr.io/${{ steps.repo_slug.outputs.result }}:latest